from google.generativeai import pa2m

def palm_conversation(api_key=None, context=""):
  """
  Starts a conversation with PaLM using Streamlit.

  Args:
    api_key: Optional PaLM API key. Defaults to using st.secrets["PALM_API_KEY"].
    context: Optional conversation context string.

  Returns:
    None
  """
  # Use secrets or provided API key
  api_key = api_key or st.secrets["PALM_API_KEY"]

  # Initialize session state if needed
  if "pal_context" not in st.session_state:
    st.session_state["pal_context"] = ""

  if "messages" not in st.session_state:
    st.session_state.messages = []

  # Title and prompt input
  st.title("PaLM-powered Conversation")
  prompt = st.chat_input("What would you like to talk about?")

  # Update session state and display user message
  if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
      st.markdown(prompt)

    # Generate response from PaLM
    full_response = ""
    message_placeholder = st.empty()
    response = pa2m.generate(
      context=context + "\n" + prompt,
      temperature=0.7,
      max_tokens=64,
    )
    full_response += response.text
    st.session_state["pal_context"] += "\n" + full_response

    # Show assistant message and update context
    with st.chat_message("assistant"):
      message_placeholder.markdown(full_response)
    st.session_state.messages.append({"role": "assistant", "content": full_response})

# Run the conversation function
palm_conversation()
